<library path="lib/libvelocity_controllers">

  <class name="velocity_controllers/JointPositionController" type="velocity_controllers::JointPositionController" base_class_type="controller_interface::ControllerBase">
    <description>
      The JointPositionController tracks position commands. It commands velocity. It expects a VelocityJointInterface type of hardware interface.
    </description>
  </class>

  <class name="velocity_controllers/JointVelocityController" type="velocity_controllers::JointVelocityController" base_class_type="controller_interface::ControllerBase">
    <description>
      The JointVelocityController tracks velocity commands. It commands velocity. It expects a VelocityJointInterface type of hardware interface.
    </description>
  </class>
  
  <class name="velocity_controllers/MultiJointVelocityController" type="velocity_controllers::MultiJointVelocityController" base_class_type="controller_interface::ControllerBase">
    <description>
      The MultiJointVelocityController tracks velocity commands for multiple joints as defined by an URDF file and the robot_definition parameter. Input is a vector of velocities (std_msgs/Float64MultiArray). It commands velocity to each of those joints. It expects a VelocityJointInterface type of hardware interface.
    </description>
  </class>  

  <class name="velocity_controllers/CartesianPositionController" type="velocity_controllers::CartesianPositionController" base_class_type="controller_interface::ControllerBase">
    <description>
      The CartesianPositionController tracks cartesian frame commands for the end effector as defined by an URDF file and the robot_definition parameter. Input is a cartesian pose (geometrt_msgs/Pose). It commands velocity to each of the joints. It expects a VelocityJointInterface type of hardware interface.
    </description>
  </class>

  <class name="velocity_controllers/CartesianSetpointController" type="velocity_controllers::CartesianSetpointController" base_class_type="controller_interface::ControllerBase">
    <description>
      The CartesianSetpointController tracks cartesian frame commands for the end effector as defined by an URDF file and the robot_definition parameter. If these frames are further apart than the setpoint limit (setpoint_limit on the parameter server) than the controller will linearly interpolate between the current pose and the setpoint.Input is a cartesian pose (geometrt_msgs/Pose). It commands velocity to each of the joints. It expects a VelocityJointInterface type of hardware interface.
    </description>
  </class>

  <class name="velocity_controllers/JointSetpointController" type="velocity_controllers::JointSetpointController" base_class_type="controller_interface::ControllerBase">
    <description>
      The JointSetpointController tracks joint position commands. Input is a vector of  pose (sensor_msgs/JointState). It commands velocity to each of the joints. It expects a VelocityJointInterface type of hardware interface.
    </description>
  </class>

</library>
